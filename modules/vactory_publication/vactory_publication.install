<?php

/**
 * @file
 * Install file.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\vactory_publication\Exceptions\BlockCreationException;
use Drupal\block_content\Entity\BlockContent;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\media\Entity\Media;

/**
 * Implements hook_install().
 */
function vactory_publication_install() {
  // Term names to be added.
  $items = [
    'Annonce',
    'Environnement',
    'Innovation',
    'Pubication',
  ];

  foreach ($items as $item) {
    Term::create([
      'parent' => [],
      'name'   => $item,
      'vid'    => 'vactory_publication_theme',
    ])->save();
  }

  // Create publication view introduction custom block.
  $block_views_introduction = BlockContent::create([
    'info' => 'Publication view introduction',
    'block_machine_name' => 'publication_view_introduction',
    'type' => 'vactory_block_component',
  ]);

  try {
    $block_views_introduction->save();
  }
  catch (BlockCreationException $e) {
    $message = t("Problem has been detected while creating block publication_view_introduction, the block might be already exist.");
    \Drupal::logger('vactory_publication')->notice($message);
  }
}

/**
 * Implements hook_update_N().
 *
 * Create default custom block introduction for vactory publication view.
 */
function vactory_publication_update_8101() {
  // Create publication view introduction custom block.
  $block_views_introduction = BlockContent::create([
    'info' => 'Publication view introduction',
    'block_machine_name' => 'publication_view_introduction',
    'type' => 'vactory_block_component',
  ]);

  try {
    $block_views_introduction->save();
  }
  catch (BlockCreationException $e) {
    $message = t("Problem has been detected while creating block publication_view_introduction, the block might be already exist.");
    \Drupal::logger('vactory_publication')->notice($message);
  }
}

/**
 * Implements hook_uninstall().
 */
function vactory_publication_uninstall($is_syncing) {
  // Clean vactory publication content type config fields.
  Drupal::service('vactory_core.tools')->cleanEntityConfigFields('node', 'vactory_publication');
  // CLean module install configs.
  Drupal::service('vactory_core.tools')->cleanModuleConfigs('vactory_publication');
}

/**
 * Create a new media field to store existing field_vactory_document values in.
 */
function vactory_publication_update_9500(&$sandbox) {
  $entity_type = 'node';
  $bundle = 'vactory_publication';

  $field = FieldConfig::loadByName($entity_type, $bundle, 'field_vactory_media_document');
  if (!$field) {
    $media_document_storage = FieldStorageConfig::loadByName($entity_type, 'field_vactory_media_document');
    if (!$media_document_storage) {
      $media_document_storage = FieldStorageConfig::create([
        'field_name' => 'field_vactory_media_document',
        'entity_type' => $entity_type,
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'media',
        ],
        'cardinality' => 1,
        'translatable' => TRUE,
      ]);
      $media_document_storage->save();
    }

    $media_support_field_config = FieldConfig::create([
      'field_storage' => $media_document_storage,
      'bundle' => $bundle,
      'label' => t('Download'),
    ]);
    $media_support_field_config->save();

    $entity_form_display = Drupal::entityTypeManager()->getStorage('entity_form_display')
      ->load('node.' . $bundle . '.default');

    if ($entity_form_display) {
      $entity_form_display->setComponent('field_vactory_media_document', [
        'type' => 'media_library_widget',
      ])->save();
    }

    // Add new field to entity view display.
    $default_entity_view_display = Drupal::entityTypeManager()->getStorage('entity_view_display')
      ->load('node.' . $bundle . '.default');
    $full_entity_view_display = Drupal::entityTypeManager()->getStorage('entity_view_display')
      ->load('node.' . $bundle . '.full');
    if ($default_entity_view_display) {
      $default_entity_view_display->setComponent('field_vactory_media_document', [
        'label' => 'hidden',
      ])->save();
    }
    if ($full_entity_view_display) {
      $full_entity_view_display->setComponent('field_vactory_media_document', [
        'label' => 'hidden',
      ])->save();
    }
  }
}

/**
 * Copy existing field_vactory_document into the new media field values.
 *
 * Aupdate the label for field_vactory_document.
 */
function vactory_publication_update_9501(&$sandbox) {
  $entity_type = 'node';
  $bundle = 'vactory_publication';

  $field = FieldConfig::loadByName($entity_type, $bundle, 'field_vactory_media_document');
  if (!$field) {
    trigger_error('Field field_vactory_media_document does not exist within vactory_publication content type');
  }

  $nids = Drupal::entityTypeManager()->getStorage($entity_type)
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', $bundle)
    ->exists('field_vactory_document')
    ->execute();

  if (!empty($nids)) {
    $nodes = Drupal::entityTypeManager()->getStorage($entity_type)->loadMultiple($nids);
    $languages = Drupal::languageManager()->getLanguages();
    foreach ($nodes as $node) {
      foreach ($languages as $language) {
        if ($node->hasTranslation($language->getId())) {
          $node = Drupal::service('entity.repository')->getTranslationFromContext($node, $language->getId());
        }
        $media_id = $node->get('field_vactory_media_document')->target_id;
        if (!$media_id) {
          $document_fid = $node->get('field_vactory_document')->target_id;
          $file = \Drupal\file\Entity\File::load($document_fid);
          if ($file) {
            // Create related media entity.
            $media = Media::create([
              // Assuming the media type is 'file', adjust if different.
              'bundle' => 'file',
              'uid' => 1,
              'field_media_file' => [
                'target_id' => $file->id(),
              ],
            ]);
            $media->setName($file->getFilename())->setPublished()->save();
            $node->set('field_vactory_media_document', ['target_id' => $media->id()]);
            $node->save();
          }
        }
      }
    }
  }

  // Update the label for field_vactory_document after processing nodes.
  $field = FieldConfig::loadByName($entity_type, $bundle, 'field_vactory_document');
  if ($field) {
    // Update the label.
    $field->set('label', t('Document (Old field, the new is field_vactory_media_document)'));
    $field->save();
  }

}
